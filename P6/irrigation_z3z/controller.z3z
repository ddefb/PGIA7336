% --- Generated the 25/11/2018 at 0:9 --- %
% --- heptagon compiler, version 1.03.00 (compiled thu. may. 3 2:35:29 CET 2018) --- %
% --- Command line: /usr/local/bin/heptc -target c -target z3z -s controller irrigation.ept --- %

set_reorder(2);read("Property.lib");read("Synthesis.lib");read("Verif_Determ.lib");read("Simul.lib");read("Synthesis_Partial_order.lib");read("Orbite.lib");
% -- dependencies --- %

% ---------- process controller ---------- %

declare(controller_v_7, controller_v_8, controller_v_9, controller_c1_valve,
        controller_c1_bomb, controller_ck_3_1, controller_pnr_2,
        controller_ck_5_1, controller_pnr_1, controller_ck_7_1,
        controller_pnr, controller_error_state);
conditions : [controller_v_7, controller_v_8, controller_v_9,
              controller_c1_valve, controller_c1_bomb];
states : [controller_ck_3_1, controller_pnr_2, controller_ck_5_1,
          controller_pnr_1, controller_ck_7_1, controller_pnr,
          controller_error_state];
controllables : [controller_c1_valve, controller_c1_bomb];
evolutions : [];
initialisations : [];
controller_c : controller_c1_bomb;
controller_c_1 : controller_c1_valve;
controller_v_5 : (not controller_c);
controller_s_2_St_4_ON_1 : ((1 when controller_v_5) default -1);
controller_r_5_St_4_ON : ((1 when controller_v_5) default controller_pnr_2);
controller_s_2_St_4_OFF_1 : ((-1 when controller_c) default 1);
controller_s_2_1 : ((controller_s_2_St_4_OFF_1 when controller_ck_3_1)
  default controller_s_2_St_4_ON_1);
controller_r_5_St_4_OFF : ((1 when controller_c) default controller_pnr_2);
controller_r_5 : ((controller_r_5_St_4_OFF when controller_ck_3_1)
  default controller_r_5_St_4_ON);
controller_ck_4_1 : controller_s_2_1;
controller_ns_2_St_4_ON_1 : -1;
controller_nr_2_St_4_ON : -1;
controller_device_on_St_4_ON : 1;
controller_ns_2_St_4_OFF_1 : 1;
controller_ns_2_1 : ((controller_ns_2_St_4_OFF_1 when controller_ck_4_1)
  default controller_ns_2_St_4_ON_1);
controller_nr_2_St_4_OFF : -1;
controller_nr_2 : ((controller_nr_2_St_4_OFF when controller_ck_4_1)
  default controller_nr_2_St_4_ON);
controller_device_on_St_4_OFF : -1;
controller_device_on : ((controller_device_on_St_4_OFF
  when controller_ck_4_1) default controller_device_on_St_4_ON);
controller_bomb_on : controller_device_on;
controller_v_6 : (not controller_c_1);
controller_s_1_St_3_ON_1 : ((1 when controller_v_6) default -1);
controller_r_4_St_3_ON : ((1 when controller_v_6) default controller_pnr_1);
controller_s_1_St_3_OFF_1 : ((-1 when controller_c_1) default 1);
controller_s_1_1 : ((controller_s_1_St_3_OFF_1 when controller_ck_5_1)
  default controller_s_1_St_3_ON_1);
controller_r_4_St_3_OFF : ((1 when controller_c_1) default controller_pnr_1);
controller_r_4 : ((controller_r_4_St_3_OFF when controller_ck_5_1)
  default controller_r_4_St_3_ON);
controller_ck_6_1 : controller_s_1_1;
controller_ns_1_St_3_ON_1 : -1;
controller_nr_1_St_3_ON : -1;
controller_device_on_1_St_3_ON : 1;
controller_ns_1_St_3_OFF_1 : 1;
controller_ns_1_1 : ((controller_ns_1_St_3_OFF_1 when controller_ck_6_1)
  default controller_ns_1_St_3_ON_1);
controller_nr_1_St_3_OFF : -1;
controller_nr_1 : ((controller_nr_1_St_3_OFF when controller_ck_6_1)
  default controller_nr_1_St_3_ON);
controller_device_on_1_St_3_OFF : -1;
controller_device_on_1 : ((controller_device_on_1_St_3_OFF
  when controller_ck_6_1) default controller_device_on_1_St_3_ON);
controller_valve_on : controller_device_on_1;
controller_s_St_2_HIGHER_STATE_1 : ((-1 when controller_v_7) default 1);
controller_r_3_St_2_HIGHER_STATE : ((1 when controller_v_7)
  default controller_pnr);
controller_v_10 : (controller_v_8 or controller_v_9);
controller_s_St_2_LOWER_STATE_1 : ((1 when controller_v_10) default -1);
controller_s_1_2 : ((controller_s_St_2_HIGHER_STATE_1 when controller_ck_7_1)
  default controller_s_St_2_LOWER_STATE_1);
controller_r_3_St_2_LOWER_STATE : ((1 when controller_v_10)
  default controller_pnr);
controller_r_3 : ((controller_r_3_St_2_HIGHER_STATE when controller_ck_7_1)
  default controller_r_3_St_2_LOWER_STATE);
controller_ck_8_1 : controller_s_1_2;
controller_ns_St_2_HIGHER_STATE_1 : 1;
controller_nr_St_2_HIGHER_STATE : -1;
controller_mode_St_2_HIGHER_STATE_1 : 1;
controller_ns_St_2_LOWER_STATE_1 : -1;
controller_ns_1_2 : ((controller_ns_St_2_HIGHER_STATE_1
  when controller_ck_8_1) default controller_ns_St_2_LOWER_STATE_1);
controller_nr_St_2_LOWER_STATE : -1;
controller_nr : ((controller_nr_St_2_HIGHER_STATE when controller_ck_8_1)
  default controller_nr_St_2_LOWER_STATE);
controller_mode_St_2_LOWER_STATE_1 : -1;
controller_mode_1 : ((controller_mode_St_2_HIGHER_STATE_1
  when controller_ck_8_1) default controller_mode_St_2_LOWER_STATE_1);
controller_threshold_1 : controller_mode_1;
initialisations : concat(initialisations, [(controller_ck_3_1 = 1)]);
evolutions : concat(evolutions,
                    [(controller_ns_2_1 default controller_ck_3_1)]);
initialisations : concat(initialisations, [(controller_pnr_2 = -1)]);
evolutions : concat(evolutions, [(controller_nr_2 default controller_pnr_2)]);
initialisations : concat(initialisations, [(controller_ck_5_1 = 1)]);
evolutions : concat(evolutions,
                    [(controller_ns_1_1 default controller_ck_5_1)]);
initialisations : concat(initialisations, [(controller_pnr_1 = -1)]);
evolutions : concat(evolutions, [(controller_nr_1 default controller_pnr_1)]);
initialisations : concat(initialisations, [(controller_ck_7_1 = -1)]);
evolutions : concat(evolutions,
                    [(controller_ns_1_2 default controller_ck_7_1)]);
initialisations : concat(initialisations, [(controller_pnr = -1)]);
evolutions : concat(evolutions, [(controller_nr default controller_pnr)]);
controller_ck_1 : controller_threshold_1;
controller_rule_Lower : (controller_bomb_on and controller_valve_on);
controller_v_4 : (not controller_valve_on);
controller_v : (not controller_bomb_on);
controller_rule_Higher : (controller_v and controller_v_4);
controller_rule : ((controller_rule_Higher when controller_ck_1)
  default controller_rule_Lower);
controller_assume : 1;
controller_guarantee : controller_rule;
initialisations : concat(initialisations, [(controller_error_state = 1)]);
evolutions : concat(evolutions, [controller_guarantee]);
constraints : [((controller_v_7^2) = 1), ((controller_v_8^2) = 1),
               ((controller_v_9^2) = 1), ((controller_c1_valve^2) = 1),
               ((controller_c1_bomb^2) = 1), (controller_assume = 1)];

% --- outputs : [controller_bomb_on, controller_valve_on, controller_r,
                 controller_threshold_1] --- %
controller : processus(conditions, states, evolutions, initialisations,
                       [gen(constraints)], controllables);
controller_init : initial(controller);
controller : S_Security(controller,B_True(controller,controller_error_state));
dcs_result : equal(controller_init,initial(controller));
if dcs_result then
    print("controller: synthesis succeeded.")
else
    print("controller: synthesis failed.");

if dcs_result then
    print("Triangulation and controller generation...")
else
    quit(1);
declare(p_controller_c1_valve, p_controller_c1_bomb);
phantom_vars : [p_controller_c1_valve, p_controller_c1_bomb];
controller_triang : Triang(constraint(controller),controllables,phantom_vars);
controller_inputs : [controller_v_7, controller_v_8, controller_v_9,
                     controller_ck_3_1, controller_pnr_2, controller_ck_5_1,
                     controller_pnr_1, controller_ck_7_1, controller_pnr,
                     p_controller_c1_valve, p_controller_c1_bomb];
heptagon_controller("controller_controller.ept","controller",controller_inputs,controllables,controller_triang);

