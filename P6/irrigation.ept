(*
    Implements the threshold checker
*)
type modes = Lower | Higher | Default
node threshold_checker(h, oi, os, cc:int) returns (r: int; mode: modes)
let
    automaton
        state LOWER_STATE do
            r = h;
            mode = Lower;
            unless ((h >= os) or (h >= cc)) then HIGHER_STATE 
        state HIGHER_STATE do
            r = h;
            mode = Higher;
            unless (h < oi) then LOWER_STATE
    end
tel

(*
    Implements the behavior of the devices (bomb and solenoid valve)
*)
node device(c: bool) returns (device_on:bool)
let
    automaton
        state OFF do
            device_on = false;
            unless c then ON
        state ON do
            device_on = true;
            unless not c then OFF
    end 
tel

node messenger(v:modes) returns (s:bool)
    var last x:modes = Default;
let
    if v = last x
    then s = false
    else x = v; s = true;
    end
tel

node controller(h, oi, os, cc: int) returns (bomb_on, valve_on, msg: bool; value: int; threshold: modes;)
    contract 
        var
            rule: bool;
        let
            switch threshold 
                | Lower do rule = bomb_on & valve_on 
                | Higher do rule = (not bomb_on & not valve_on)
                | Default do rule = (not bomb_on & not valve_on);
            end
        tel

            enforce rule
            with (c_bomb, c_valve: bool)

        let
            bomb_on = inlined device(c_bomb);
            valve_on = inlined device(c_valve);
            (value, threshold) = inlined threshold_checker(h, oi, os, cc);
            msg = messenger(threshold);
tel